'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import Header from '../../components/Header';
import styles from './link-minecraft.module.css'; // –ú–æ–¥—É–ª—å–Ω—ã–π CSS

export default function LinkMinecraftPage() {
  const router = useRouter();
  const [minecraftNick, setMinecraftNick] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [authStatus, setAuthStatus] = useState(null);

  const API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || 'https://backpuzzle.up.railway.app/';

  useEffect(() => {
    checkAuthStatus();
  }, []);

  const checkAuthStatus = async () => {
    try {
      const response = await fetch(`${API_BASE_URL}/api/auth/status`, {
        credentials: 'include'
      });

      if (!response.ok) {
        console.log('Auth failed on link page');
        router.push('/');
        return;
      }

      const data = await response.json();
      console.log('Link page auth status:', data);

      if (!data.authenticated) {
        router.push('/');
        return;
      }

      if (data.minecraft_nickname && data.has_player_role) {
        console.log('User already has access, redirecting to profile');
        router.push(`/u/${data.minecraft_nickname}`);
        return;
      }

      if (data.minecraft_nickname && !data.has_player_role) {
        console.log('User has minecraft account but no role, redirecting to purchase');
        router.push('/purchase');
        return;
      }

      setAuthStatus(data);
    } catch (error) {
      console.error('Error checking auth status:', error);
      router.push('/');
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    if (!minecraftNick.trim()) {
      setError('–í–≤–µ–¥–∏—Ç–µ Minecraft –Ω–∏–∫');
      return;
    }

    setLoading(true);
    setError('');

    try {
      const response = await fetch(`${API_BASE_URL}/api/auth/link_minecraft`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        credentials: 'include',
        body: JSON.stringify({
          minecraft_nickname: minecraftNick.trim()
        })
      });

      if (!response.ok) {
        const errorText = await response.text();
        try {
          const errorData = JSON.parse(errorText);
          setError(errorData.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞');
        } catch {
          setError('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
        }
        return;
      }

      const data = await response.json();
      console.log('Link success:', data);
      window.location.href = '/purchase?linked=true';

    } catch (error) {
      console.error('Error linking Minecraft account:', error);
      setError('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
    } finally {
      setLoading(false);
    }
  };

  if (!authStatus) {
    return (
      <>
        <Header />
        <div className={styles.linkPage}>
          <div className={styles.loadingContainer}>
            <div className={styles.spinner}></div>
            <p>–ó–∞–≥—Ä—É–∑–∫–∞...</p>
          </div>
        </div>
      </>
    );
  }

  return (
    <>
      <Header />
      <div className={styles.linkPage}>
        <div className={styles.linkContainer}>
          <div className={styles.linkHeader}>
            <div className={styles.minecraftIcon}>üü´</div>
            <h1>–ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é</h1>
            <p>–î–ª—è –ø–æ–∫—É–ø–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∏ –∏–≥—Ä—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞—Ö —Ç—Ä–µ–±—É–µ—Ç—Å—è –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç Minecraft Java Edition</p>
          </div>

          <div className={styles.userInfoCard}>
            <div className={styles.discordInfo}>
              <img 
                src={authStatus.discord_avatar 
                  ? `https://cdn.discordapp.com/avatars/${authStatus.discord_id}/${authStatus.discord_avatar}.png?size=64`
                  : '/assets/user.png'
                }
                alt="Discord Avatar"
                className={styles.discordAvatarLarge}
              />
              <div>
                <h3>{authStatus.discord_username}</h3>
                <p>Discord –∞–∫–∫–∞—É–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω</p>
              </div>
            </div>
          </div>

          <form onSubmit={handleSubmit} className={styles.minecraftForm}>
            <div className={styles.formGroup}>
              <label htmlFor="minecraft-nick">–ù–∏–∫–Ω–µ–π–º –≤–∞—à–µ–π –ª–∏—Ü–µ–Ω–∑–∏–∏ Minecraft</label>
              <input
                id="minecraft-nick"
                type="text"
                value={minecraftNick}
                onChange={(e) => setMinecraftNick(e.target.value)}
                placeholder="vanilla812boy"
                className={styles.minecraftInput}
                disabled={loading}
                maxLength={16}
                pattern="[a-zA-Z0-9_]{1,16}"
              />
              <small className={styles.inputHint}>
                –£–∫–∞–∑—ã–≤–∞–π—Ç–µ –Ω–∏–∫–Ω–µ–π–º –ª–∏—Ü–µ–Ω–∑–∏–∏ Java Edition, –Ω–µ –Ω–∏–∫–Ω–µ–π–º Xbox –∏–ª–∏ Bedrock Edition
              </small>
            </div>

            {error && (
              <div className={styles.errorMessage}>
                {error}
              </div>
            )}

            <button 
              type="submit" 
              className={styles.continueBtn}
              disabled={loading}
            >
              {loading ? '–ü—Ä–æ–≤–µ—Ä—è–µ–º...' : '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å'}
            </button>
          </form>

          <div className={styles.helpSection}>
            <button className={styles.helpBtn} type="button">
              –ö–∞–∫ —É–∑–Ω–∞—Ç—å –Ω–∏–∫–Ω–µ–π–º?
            </button>
            <button className={styles.noLicenseBtn} type="button">
              –£ –º–µ–Ω—è –Ω–µ—Ç –ª–∏—Ü–µ–Ω–∑–∏–∏
            </button>
          </div>

          <div className={styles.legalText}>
            <p>
              –ù–∞–∂–∏–º–∞—è –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å¬ª, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å{' '}
              <a href="/terms" target="_blank">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º</a>,{' '}
              <a href="/privacy" target="_blank">–ü–æ–ª–∏—Ç–∏–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤</a> –∏{' '}
              <a href="/privacy" target="_blank">–ü–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏</a>
            </p>
          </div>
        </div>
      </div>
    </>
  );
}
