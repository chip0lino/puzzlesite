'use client';

import { useState, useEffect } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import Header from '../../components/Header';
import './purchase.css';

export default function PurchasePage() {
  const router = useRouter();
  const searchParams = useSearchParams();
  const [authStatus, setAuthStatus] = useState(null);
  const [selectedPlan, setSelectedPlan] = useState('monthly');
  const [loading, setLoading] = useState(false);
  const [showSuccess, setShowSuccess] = useState(false);
  const [isRenewal, setIsRenewal] = useState(false);
  
  const API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || 'https://backpuzzle.up.railway.app/api/auth/purchase';

  const plans = [
    {
      id: 'monthly',
      name: '–ú–µ—Å—è—á–Ω—ã–π –¥–æ—Å—Ç—É–ø',
      price: 299,
      duration: '30 –¥–Ω–µ–π',
      features: [
        '–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Å–µ—Ä–≤–µ—Ä—É',
        '–í—Å–µ –∏–≥—Ä–æ–≤—ã–µ —Ä–µ–∂–∏–º—ã',
        '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞',
        '–î–æ—Å—Ç—É–ø –∫ Discord —Å–µ—Ä–≤–µ—Ä—É'
      ]
    },
    {
      id: 'quarterly',
      name: '–ö–≤–∞—Ä—Ç–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø',
      price: 799,
      duration: '90 –¥–Ω–µ–π',
      originalPrice: 897,
      features: [
        '–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Å–µ—Ä–≤–µ—Ä—É',
        '–í—Å–µ –∏–≥—Ä–æ–≤—ã–µ —Ä–µ–∂–∏–º—ã',
        '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞',
        '–î–æ—Å—Ç—É–ø –∫ Discord —Å–µ—Ä–≤–µ—Ä—É',
        '–°–∫–∏–¥–∫–∞ 11%'
      ],
      popular: true
    },
    {
      id: 'yearly',
      name: '–ì–æ–¥–æ–≤–æ–π –¥–æ—Å—Ç—É–ø',
      price: 2999,
      duration: '365 –¥–Ω–µ–π',
      originalPrice: 3588,
      features: [
        '–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Å–µ—Ä–≤–µ—Ä—É',
        '–í—Å–µ –∏–≥—Ä–æ–≤—ã–µ —Ä–µ–∂–∏–º—ã',
        '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞',
        '–î–æ—Å—Ç—É–ø –∫ Discord —Å–µ—Ä–≤–µ—Ä—É',
        '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞',
        '–°–∫–∏–¥–∫–∞ 16%'
      ]
    }
  ];

  useEffect(() => {
    checkAuthStatus();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏—à–ª–∏ –ª–∏ –º—ã —Å—é–¥–∞ –ø–æ—Å–ª–µ –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞
    if (searchParams.get('linked') === 'true') {
      setShowSuccess(true);
      setTimeout(() => setShowSuccess(false), 5000);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –ª–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞
    const currentUrl = window.location.href;
    if (currentUrl.includes('expired') || currentUrl.includes('renew')) {
      setIsRenewal(true);
    }
  }, [searchParams]);

  const checkAuthStatus = async () => {
    try {
      const response = await fetch(`${API_BASE_URL}/api/auth/status`, {
        credentials: 'include'
      });
      
      if (!response.ok) {
        console.log('Auth status check failed:', response.status);
        router.push('/');
        return;
      }
      
      const data = await response.json();
      console.log('Auth status data:', data);
      
      if (!data.authenticated) {
        console.log('User not authenticated');
        router.push('/');
        return;
      }
      
      if (!data.minecraft_nickname) {
        console.log('No minecraft nickname found, redirecting to link page');
        router.push('/link-minecraft');
        return;
      }
      
      // –ù–û–í–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å —Ä–æ–ª—å –∏–≥—Ä–æ–∫–∞ - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å
      if (data.has_player_role && data.minecraft_nickname) {
        console.log('User already has player role, redirecting to profile');
        router.push(`/u/${data.minecraft_nickname}`);
        return;
      }
      
      console.log('Auth status OK, user needs to purchase access');
      setAuthStatus(data);
    } catch (error) {
      console.error('Error checking auth status:', error);
      router.push('/');
    }
  };

  const handlePurchase = async () => {
    setLoading(true);
    
    try {
      const response = await fetch(`${API_BASE_URL}/api/auth/purchase`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        credentials: 'include',
        body: JSON.stringify({
          plan_id: selectedPlan
        })
      });

      if (!response.ok) {
        const errorText = await response.text();
        try {
          const errorData = JSON.parse(errorText);
          throw new Error(errorData.error || 'Purchase failed');
        } catch {
          throw new Error('Server error');
        }
      }

      const data = await response.json();
      
      // –£—Å–ø–µ—à–Ω–∞—è –ø–æ–∫—É–ø–∫–∞ - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞
      alert(`${data.message}\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä!`);
      router.push(`/u/${authStatus.minecraft_nickname}`);
      
    } catch (error) {
      console.error('Purchase error:', error);
      alert(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ: ${error.message}`);
    } finally {
      setLoading(false);
    }
  };

  const handleLogout = async () => {
    try {
      await fetch(`${API_BASE_URL}/api/auth/logout`, {
        method: 'POST',
        credentials: 'include'
      });
      
      // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é
      router.push('/');
    } catch (error) {
      console.error('Logout error:', error);
    }
  };

  if (!authStatus) {
    return (
      <>
        <Header />
        <div className="purchase-page">
          <div className="loading-container">
            <div className="spinner"></div>
            <p>–ó–∞–≥—Ä—É–∑–∫–∞...</p>
          </div>
        </div>
      </>
    );
  }

  const selectedPlanData = plans.find(plan => plan.id === selectedPlan);

  return (
    <>
      <Header />
      <div className="purchase-page">
        {showSuccess && (
          <div className="success-banner">
            ‚úÖ Minecraft –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω –¥–æ—Å—Ç—É–ø–∞.
          </div>
        )}
        
        <div className="purchase-container">
          <div className="purchase-header">
            <h1>üéÆ {isRenewal ? '–ü—Ä–æ–¥–ª–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–µ—Ä–≤–µ—Ä—É' : '–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –¥–æ—Å—Ç—É–ø –∫ —Å–µ—Ä–≤–µ—Ä—É'}</h1>
            <p>{isRenewal ? '–í–∞—à –¥–æ—Å—Ç—É–ø –∏—Å—Ç–µ–∫. –ü—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏–≥—Ä—ã' : '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–ª–∞–Ω –¥–ª—è –∏–≥—Ä—ã –Ω–∞ –Ω–∞—à–∏—Ö —Å–µ—Ä–≤–µ—Ä–∞—Ö'}</p>
          </div>

          <div className="user-card">
            <div className="user-info">
              <img 
                src={`https://mc-heads.net/avatar/${authStatus.minecraft_nickname}/64`}
                alt={authStatus.minecraft_nickname}
                className="minecraft-head"
                onError={(e) => {
                  e.target.src = `https://crafatar.com/avatars/${authStatus.minecraft_nickname}?size=64&default=MHF_Steve`;
                }}
              />
              <div>
                <h3>{authStatus.minecraft_nickname}</h3>
                <p>Minecraft –∞–∫–∫–∞—É–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω</p>
              </div>
            </div>
          </div>

          <div className="plans-grid">
            {plans.map((plan) => (
              <div 
                key={plan.id}
                className={`plan-card ${selectedPlan === plan.id ? 'selected' : ''} ${plan.popular ? 'popular' : ''}`}
                onClick={() => setSelectedPlan(plan.id)}
              >
                {plan.popular && <div className="popular-badge">–ü–æ–ø—É–ª—è—Ä–Ω—ã–π</div>}
                
                <h3>{plan.name}</h3>
                <div className="price-section">
                  <div className="price">
                    <span className="currency">‚ÇΩ</span>
                    <span className="amount">{plan.price}</span>
                  </div>
                  {plan.originalPrice && (
                    <div className="original-price">‚ÇΩ{plan.originalPrice}</div>
                  )}
                  <div className="duration">{plan.duration}</div>
                </div>
                
                <ul className="features">
                  {plan.features.map((feature, index) => (
                    <li key={index}>
                      <span className="checkmark">‚úì</span>
                      {feature}
                    </li>
                  ))}
                </ul>
              </div>
            ))}
          </div>

          <div className="checkout-section">
            <div className="order-summary">
              <h3>–°–≤–æ–¥–∫–∞ –∑–∞–∫–∞–∑–∞</h3>
              <div className="summary-row">
                <span>–ü–ª–∞–Ω:</span>
                <span>{selectedPlanData.name}</span>
              </div>
              <div className="summary-row">
                <span>–ò–≥—Ä–æ–∫:</span>
                <span>{authStatus.minecraft_nickname}</span>
              </div>
              <div className="summary-row total">
                <span>–ò—Ç–æ–≥–æ:</span>
                <span>‚ÇΩ{selectedPlanData.price}</span>
              </div>
            </div>

            <button 
              className="purchase-btn"
              onClick={handlePurchase}
              disabled={loading}
            >
              {loading ? '–û–±—Ä–∞–±–æ—Ç–∫–∞...' : `–ö—É–ø–∏—Ç—å –∑–∞ ‚ÇΩ${selectedPlanData.price}`}
            </button>

            <button 
              className="logout-btn"
              onClick={handleLogout}
              disabled={loading}
            >
              –í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞
            </button>

            <div className="payment-methods">
              <p>–ü—Ä–∏–Ω–∏–º–∞–µ–º –∫ –æ–ø–ª–∞—Ç–µ:</p>
              <div className="payment-icons">
                <span>üí≥</span>
                <span>üè¶</span>
                <span>üì±</span>
                <span>üåê</span>
              </div>
            </div>

            <div className="security-note">
              <p>üîí –í–∞—à–∏ –ø–ª–∞—Ç–µ–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—â–∏—â–µ–Ω—ã SSL-—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ–º</p>
            </div>
          </div>
        </div>
      </div>
    </>
  );
}